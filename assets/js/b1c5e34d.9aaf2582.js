"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3120],{3905:(e,t,a)=>{a.d(t,{Zo:()=>h,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),u=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},h=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),d=u(a),c=r,m=d["".concat(l,".").concat(c)]||d[c]||p[c]||o;return a?n.createElement(m,i(i({ref:t},h),{},{components:a})):n.createElement(m,i({ref:t},h))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var u=2;u<o;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},749:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var n=a(7462),r=(a(7294),a(3905));const o={slug:"Sequential GUIDs in EF Core Might Not Be Sequential",title:"Sequential GUIDs in EF Core Might Not Be Sequential",authors:["conner"],tags:["ef core","c#","dotnet"]},i=void 0,s={permalink:"/website/blog/Sequential GUIDs in EF Core Might Not Be Sequential",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-02-27-Sequential-Guids/index.md",source:"@site/blog/2023-02-27-Sequential-Guids/index.md",title:"Sequential GUIDs in EF Core Might Not Be Sequential",description:"The Background",date:"2023-02-27T00:00:00.000Z",formattedDate:"February 27, 2023",tags:[{label:"ef core",permalink:"/website/blog/tags/ef-core"},{label:"c#",permalink:"/website/blog/tags/c"},{label:"dotnet",permalink:"/website/blog/tags/dotnet"}],readingTime:11.475,hasTruncateMarker:!1,authors:[{name:"Conner Phillis",title:"Lead Developer, Keymark Labs",url:"https://github.com/connerphillis",imageURL:"https://github.com/connerphillis.png",key:"conner"}],frontMatter:{slug:"Sequential GUIDs in EF Core Might Not Be Sequential",title:"Sequential GUIDs in EF Core Might Not Be Sequential",authors:["conner"],tags:["ef core","c#","dotnet"]},nextItem:{title:"Welcome",permalink:"/website/blog/welcome"}},l={authorsImageUrls:[void 0]},u=[{value:"The Background",id:"the-background",level:3},{value:"Investigating the Issue",id:"investigating-the-issue",level:3},{value:"Running our Own Benchmarks",id:"running-our-own-benchmarks",level:3},{value:"Parallel Entity Framework Sequential Guid Generation",id:"parallel-entity-framework-sequential-guid-generation",level:5},{value:"Parallel Guid Generation with NEWSEQUENTIALID()",id:"parallel-guid-generation-with-newsequentialid",level:5},{value:"Studying the Issue",id:"studying-the-issue",level:3},{value:"Hybrid Key Generation Approach",id:"hybrid-key-generation-approach",level:6},{value:"The Great Key Migration",id:"the-great-key-migration",level:3},{value:"Closing",id:"closing",level:3},{value:"Thank You!",id:"thank-you",level:3}],h={toc:u},d="wrapper";function p(e){let{components:t,...o}=e;return(0,r.kt)(d,(0,n.Z)({},h,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"the-background"},"The Background"),(0,r.kt)("p",null,"Our customers more often than not chose to host our application on their own machines, so we frequently get asked what the minimum hardware requirements are. We base the estimates we provide on the requirements of similar applications, but we had never put in the work to really test our application and see what sort of throughput we could expect."),(0,r.kt)("p",null,"We decided to finally get a conclusive answer for ourselves, so we would put some resources into running benchmarks. We settled on a simple setup. Write a simple script that would simulate a series of requests that would run through hot paths, and see how many operations we could complete in a fixed time frame. The script would run X number of concurrent requests for N minutes, log the statistics to a CSV file and export our results to a CSV file for analysis."),(0,r.kt)("p",null,"We architected our test server to simulate an organization stressed for resources. On a single virtual machine we installed SQL Server, IIS, and our application. For the hardware behind the virtual machine we used an Azure F4s v2 (4 vCPU, 8GB)."),(0,r.kt)("p",null,"For our warm up, we ran the script with 20 concurrent tasks for 10 minutes, the results that we got?"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"263724 total requests completed\n67431 form submissions in 10 minutes across 20 tasks\n")),(0,r.kt)("p",null,"While this may not seem like a lot for some, this was great for us. We consider our workloads somewhat computationally expensive, and didn't imagine we would get these sort of numbers out of our code. Especially when hosting the server and database on the same machine."),(0,r.kt)("p",null,"Our logs indicated that we were on average consuming about 70% of the CPU. The data that we got was plenty for us to determine our hardware requirements, but just for fun we decided to see how far we could push it. We resized the VM to an F8s V2 (8 vCPU 16GB) expecting linear results."),(0,r.kt)("p",null,"The script was set, 50 concurrent tasks instead of 20 to account for the increase in core count,running for ten minutes. The results?"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"275532 total requests completed\n68883 form submissions in 10 minute across 50 tasks.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"What!?!?"))," We doubled the hardware, 2.5x'd the number of concurrent runs, and ended up with only ~3% more completed requests. This set off an alarm for us, we obviously had a large issue with the scalability of our application."),(0,r.kt)("h3",{id:"investigating-the-issue"},"Investigating the Issue"),(0,r.kt)("p",null,"The first thing that we theorized was that the increased number of tasks was causing problems with IIS, causing connections to stay open for longer than they should. We altered our the parameters of our test script to use 20 tasks over 10 minutes, mirroring the test against the F4s machine. After 10 minutes, the results were..."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"275916 total requests completed\n68979 form submissions in 10 minutes across 10 tasks\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"The same??"))," There was only a marginal difference in the results. Less than 1% from the original run. The test machine was hardly using a fraction of the processing power and network it could utilize. Something bigger was afoot."),(0,r.kt)("p",null,"We started a Remote Desktop session with the server and ran another test, 10 minutes, 20 cores. We observed SQL Server start by consuming ~30% of our CPU time, and watched it move up to as much as 60% of the CPU by the end of the run. Over time, our performance was getting ",(0,r.kt)("em",{parentName:"p"},"worse"),"."),(0,r.kt)("p",null,"On a whim, we ran a query to check for index fragmentation of the database."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Production Index Fragmentation",src:a(2780).Z,width:"842",height:"805"})),(0,r.kt)("p",null,"The index fragmentation was far above what could be expected out of a healthy database. North of 50% for some indexes. While we can't ",(0,r.kt)("em",{parentName:"p"},"prove")," right now that this is what is causing our scaling issue",(0,r.kt)("sup",null,(0,r.kt)("a",{parentName:"p",href:"#footnote1"},"1"))," it does explain how SQL server can continuously need more resources. As the size of the data grows, SQL is having to spend more time doing table scans and expending more resources on IO."),(0,r.kt)("p",null,"We found this puzzling, we were using Entity Framework Core's ",(0,r.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.valuegeneration.sequentialguidvaluegenerator?view=efcore-7.0"},(0,r.kt)("inlineCode",{parentName:"a"},"Sequential Guid Value Generator"))," With the ",(0,r.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations.schema.databasegeneratedoption?view=net-7.0"},(0,r.kt)("inlineCode",{parentName:"a"},"DatabaseGeneratedOption.Identity"))," option. The documentation states:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Generates sequential Guid values optimized for use in Microsoft SQL server clustered keys or indexes, yielding better performance than random values. This is the default generator for SQL Server Guid columns which are set to be generated on add.")),(0,r.kt)("p",null,"It's important to note in addition to this documentation for those that aren't aware, setting a column to use a GUID as a key with ",(0,r.kt)("inlineCode",{parentName:"p"},"DatabaseGeneratedOption.Identity")," ",(0,r.kt)("strong",{parentName:"p"},"does not mean that it will be generated by the database"),". Instead, EF Core generates the sequential GUID itself, and then inserts it into the database (",(0,r.kt)("a",{parentName:"p",href:"https://weblogs.asp.net/ricardoperes/current-limitations-of-entity-framework-core#:~:text=For%20GUIDs%2C%20EF%20Core%20automatically%20generates%2C%20on%20the,makes%20it%20database-specific%20%E2%80%93%20currently%2C%20SQL%20Server%20only."},"read here"),"). This can be observed when comparing GUIDs generated normally to those generated by ",(0,r.kt)("inlineCode",{parentName:"p"},"NEWSEQUENTIALID")," later in this post."),(0,r.kt)("p",null,"Additionally, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dotnet/efcore/pull/20528#issuecomment-612889464"},"this issue")," in the EF core repository shows that EF core generates GUIDs ",(0,r.kt)("em",{parentName:"p"},"better")," than SQL Server does. The documentation wasn't lining up with what we were seeing, it was time to recreate the EF tests, and see if we could simulate the behavior we were getting from our server."),(0,r.kt)("h3",{id:"running-our-own-benchmarks"},"Running our Own Benchmarks"),(0,r.kt)("p",null,"The first thing we did was see if we could reproduce the test done by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/roji"},"roji")," on the EF core team with 100000. And..."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Average page space used in %"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Average fragmentation in percent"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Record Count"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NEWSEQUENTIALID"),(0,r.kt)("td",{parentName:"tr",align:"right"},"99.91 %"),(0,r.kt)("td",{parentName:"tr",align:"right"},"1.04 %"),(0,r.kt)("td",{parentName:"tr",align:"right"},"100000")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"EF Core Sequential Guid Value Generator"),(0,r.kt)("td",{parentName:"tr",align:"right"},"99.86 %"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.56 %"),(0,r.kt)("td",{parentName:"tr",align:"right"},"100000")))),(0,r.kt)("p",null,"Same results as the team found. The EF Core value generator is still generating GUIDs optimally as of SQL Server 2022."),(0,r.kt)("p",null,"But wait... this isn't really how a web server works. Entities aren't just inserted one after another when coming from a web server. Entries are created in response to user activity, and that can happen whenever. Database activity happens spontaneously, whenever a user performs an action, and different user hardware can mean these operations can take different amounts of time. What if we modify the test, instead to simulate a large degree of parallel actions rather than pure sequential inserts? "),(0,r.kt)("p",null,"We altered our script, instead of inserting 100,000 sequential ids into the database, we created 20 tasks, and told each of those tasks to insert 5000 rows into the database. Once this was done we looked at index fragmentation again."),(0,r.kt)("h5",{id:"parallel-entity-framework-sequential-guid-generation"},"Parallel Entity Framework Sequential Guid Generation"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"right"},"average page space used in %"),(0,r.kt)("th",{parentName:"tr",align:"right"},"average fragmentation in percent"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Record Count"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"57.93 %"),(0,r.kt)("td",{parentName:"tr",align:"right"},"44.53 %"),(0,r.kt)("td",{parentName:"tr",align:"right"},"100000")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Multithreaded Simulation Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'class Program\n{\n  static async Task Main(string[] args)\n  {\n    await using var globalCtx = new BlogContext();\n    await globalCtx.Database.EnsureDeletedAsync();\n    await globalCtx.Database.EnsureCreatedAsync();\n    await globalCtx.DisposeAsync();\n\n    var counter = 0;\n\n    var tasks = new List<Task>();\n    for (int i = 0; i < 20; i++)\n    {\n      var t = Task.Run(async () =>\n      {\n        await using var ctx = new BlogContext();\n\n        for (var j = 0; j < 5000; j++)\n        {\n          var value = Interlocked.Increment(ref counter);\n          ctx.Blogs.Add(new Blog { Name = "Foo" + value });\n          await ctx.SaveChangesAsync();\n        }\n      });\n\n      tasks.Add(t);\n    }\n\n    await Task.WhenAll(tasks);\n  }\n}\n\npublic class BlogContext : DbContext\n{\n  public DbSet<Blog> Blogs { get; set; }\n\n  protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder.UseSqlServer("Server=.;Database=Testing;Trusted_Connection=true;Encrypt=false;");\n}\n\npublic class Blog\n{\n  public Guid Id { get; set; }\n  public string Name { get; set; }\n}\n'))),(0,r.kt)("p",null,"The top 10 results returned when querying the database illuminate the issue: ",(0,r.kt)("img",{alt:"TOP 10 Results From SequentialGuidValueGenerator",src:a(3857).Z,width:"508",height:"392"})),(0,r.kt)("p",null,"Our conclusion? ",(0,r.kt)("strong",{parentName:"p"},"Entity Framework seeks to create an efficient value generation strategy optimized for SQL Server, but after the network stack has its say, its likely that some rows will be inserted out of their original order.")),(0,r.kt)("p",null,"Compare that to the results that you get when running the same code, but setting ",(0,r.kt)("inlineCode",{parentName:"p"},'HasDefaultValueSql("NEWSEQUENTIALID()")')," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"OnModelCreating")," method in the database context:"),(0,r.kt)("h5",{id:"parallel-guid-generation-with-newsequentialid"},"Parallel Guid Generation with NEWSEQUENTIALID()"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"right"},"average page space used in %"),(0,r.kt)("th",{parentName:"tr",align:"right"},"average fragmentation in percent"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Record Count"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"96.03 %"),(0,r.kt)("td",{parentName:"tr",align:"right"},"7.67 %"),(0,r.kt)("td",{parentName:"tr",align:"right"},"100000")))),(0,r.kt)("p",null,"The fragmentation percentage is still not as good as inserting the rows one after the other, and the average page space used is a bit lower, but I think we can all agree that it's better than generating the IDs in memory with Entity Framework Core."),(0,r.kt)("p",null,"This method has drawbacks too, however. Looking at the GUIDs that SQL generates it's hard to say that they have the same uniqueness guarantee that standard GUIDs have. It appears that the leading bits of the GUIDs are all that change when taking a sample of the first 10 inserted in the database after our concurrent test:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"NEWSEQUENTIALID Results",src:a(6184).Z,width:"608",height:"403"})),(0,r.kt)("p",null,"(in case anyone is curious, generating the GUIDs randomly led to a fragmentation percentage of almost 99%)"),(0,r.kt)("h3",{id:"studying-the-issue"},"Studying the Issue"),(0,r.kt)("p",null,"There were two main benefits that initially brought us to use GUIDs as primary keys in our database."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"We sometimes have to export data across servers, so the (near) uniqueness guarantee meant that it should be trivial to merge the data"),(0,r.kt)("li",{parentName:"ol"},"Certain actions don't require our users to be connected to our server all the time as long as they do a periodic sync. In this case we could let the client generate IDs and after the sync turn the IDs into sequential ones. Once we were done with the transformation we just had to inform the client of the new IDs.")),(0,r.kt)("p",null,"Unfortunately, the SQL server GUIDs don't seem like they would be able to cut it for us, as it seems likely that a collision could occur when exporting from one server to another."),(0,r.kt)("p",null,"This led us to a tough crossroad. Do we"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Keep going, knowing that scaling up our application leads to highly diminishing returns necessitating expensive hardware OR"),(0,r.kt)("li",{parentName:"ol"},"Lose the benefits GUIDs give us in favor of another primary key format that would be better suited for parallel inserts.")),(0,r.kt)("p",null,"Ultimately, we decided that our best path forward was to go with a hybrid approach. We would alter our tables to have two IDs where GUIDs are required. This involved using an integer primary key generated by the database, and GUID value as a non-clustered index with a unique constraint. These GUIDs would use the ",(0,r.kt)("inlineCode",{parentName:"p"},"SequentialGuidValueGenerator"),' to try to "presort" some of the items in the non-clustered index, but we wouldn\'t enforce that it had to be a sequential GUID.'),(0,r.kt)("p",null,"After performing our parallel benchmark, we ended up with the following results:"),(0,r.kt)("h6",{id:"hybrid-key-generation-approach"},"Hybrid Key Generation Approach"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"right"},"average page space used in %"),(0,r.kt)("th",{parentName:"tr",align:"right"},"average fragmentation in percent"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Record Count"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"94.15 %"),(0,r.kt)("td",{parentName:"tr",align:"right"},"10.38 %"),(0,r.kt)("td",{parentName:"tr",align:"right"},"100000")))),(0,r.kt)("p",null,"Just in case we ran the benchmark again with only an integer primary key, that yielded a fragmentation percentage of almost exactly 12%. It really just seems that some fragmentation is unavoidable in a parallel context."),(0,r.kt)("h3",{id:"the-great-key-migration"},"The Great Key Migration"),(0,r.kt)("p",null,"Armed with the results of the benchmarks we had ran, we decided that we would make a gamble. Every table that we had that used a GUID primary key we would alter to contain an auto-incrementing integer primary key, and a GUID UniqueId column with a unique constraint enforced. We would still use the Entity Framework Core GUID value generator to create these unique Ids so to reduce the amount of work SQL would have to do maintaining the unique constraint."),(0,r.kt)("p",null,"In the end, it took roughly two weeks of work, and by the end we had modified 600 files according to Git. We ran the benchmark again with the new composite keys and our test script outputted the result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"612304 total requests completed\n153076 form submissions in 10 minutes across 20 tasks\n")),(0,r.kt)("p",null,"This absolutely shocked us. We had more than doubled our throughput, obtaining a total boost of ",(0,r.kt)("strong",{parentName:"p"},"~127%")," by changing our code to use integer primary keys instead of GUIDs. Some may say the time investment or the risk involved isn't worth it, but in our minds, the tradeoff we got was more than worth it."),(0,r.kt)("h3",{id:"closing"},"Closing"),(0,r.kt)("p",null,"I'd like to end this post with a couple of acknowledgements."),(0,r.kt)("p",null,"First, I don't believe that using the sequential id generator strategy is bad. The Entity Framework Core team's benchmarks show that it does great work in a purely sequential workload. As long as you aren't expecting a high degree of parallelism, it seems that they are perfectly fine as a primary key. Even if you do have a parallel workload, its still possible to reorganize your clustered indexes."),(0,r.kt)("p",null,"Second, I want to acknowledge that its totally possible that this is all a coincidence, and that the GUIDs weren't the cause of the performance issues that we were seeing in SQL Server. It's our belief that it's the culprit. It's also of secondary importance for us to raise awareness that the assumption that we made, that because ",(0,r.kt)("inlineCode",{parentName:"p"},"SequentialGUidValueGenerator")," uses a strategy optimized for sequential access in SQL server, that GUIDs aren't always going to be ",(0,r.kt)("em",{parentName:"p"},"inserted")," sequentially."),(0,r.kt)("p",null,"Lastly, I encourage anyone who reads this to look into the methods enclosed and run their own benchmarks to draw their own conclusions. If there is a flaw in my methods I'm happy to make an edit or publish a correction."),(0,r.kt)("h3",{id:"thank-you"},"Thank You!"),(0,r.kt)("p",null,"Thank you for reading my first blog post, please let me know what worked, and what didn't"),(0,r.kt)("p",null,"-- Conner"),(0,r.kt)("a",{name:"footnote1"}," 1")," It still perplexes us as to how it didn't show up on the smaller machine. It's possible (spoiler) that since we had less cores we had a lesser degree of parallelism, so rows were not being inserted out of order as bad.")}p.isMDXComponent=!0},2780:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Production-Index-Fragmentation-5f1c68d7b573a229d9debbc873c2acff.png"},3857:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Sequential-Guid-Value-Generator-Order-32d06dc998d21088408b56c6be685765.png"},6184:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/sql-sequential-guids-323ab8b5a894a9b5a74cfac28cecd10c.png"}}]);